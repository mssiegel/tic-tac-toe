{"version":3,"sources":["App.js","index.js"],"names":["App","initialBoard","useState","board","setBoard","previousBoards","setPreviousBoards","player","setPlayer","gameInProgress","setGameInProgess","winningMessage","setWinningMessage","restartBoard","useEffect","i","filter","square","length","checkForWin","className","map","key","onClick","index","addClick","slice","ReactDOM","render","document","getElementById"],"mappings":"mQAmGeA,MAhGf,WACE,IAAMC,EAAe,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IADjC,EAEaC,mBAASD,GAFtB,mBAENE,EAFM,KAECC,EAFD,OAG+BF,mBAAS,IAHxC,mBAGNG,EAHM,KAGUC,EAHV,OAIeJ,mBAAS,KAJxB,mBAINK,EAJM,KAIEC,EAJF,OAK8BN,oBAAS,GALvC,mBAKNO,EALM,KAKUC,EALV,OAM+BR,mBAAS,IANxC,mBAMNS,EANM,KAMUC,EANV,KAYb,SAASC,IACPT,EAASH,GACTK,EAAkB,IAClBE,EAAU,KACVE,GAAiB,GACjBE,EAAkB,IA+DpB,OAxEAE,qBAAU,YAoCV,WAOE,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAC1B,GAAIZ,EAAMY,IAAMZ,EAAMY,EAAE,KAAOZ,EAAMY,IAAMZ,EAAMY,EAAE,KAAOZ,EAAMY,GAE9D,YADAH,EAAkB,GAAD,OAAIT,EAAMY,GAAV,sBAKrB,IAAK,IAAIA,EAAI,EAAGA,EAAI,EAAGA,IACrB,GAAIZ,EAAMY,IAAMZ,EAAMY,EAAE,KAAOZ,EAAMY,IAAMZ,EAAMY,EAAE,KAAOZ,EAAMY,GAEhE,YADAH,EAAkB,GAAD,OAAIT,EAAMY,GAAV,oBAKnB,GAAIZ,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,GAE1D,YADAS,EAAkB,GAAD,OAAIT,EAAM,GAAV,oBAKnB,GAAIA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,GAE1D,YADAS,EAAkB,GAAD,OAAIT,EAAM,GAAV,oBAIkC,IAAjDA,EAAMa,QAAO,SAAAC,GAAM,MAAe,KAAXA,KAAeC,OAAcN,EAAkB,aACrEA,EAAkB,IApEvBO,MAwEA,yBAAKC,UAAU,OACb,2CACA,yBAAKA,UAAU,SACZjB,EAAMkB,KAAI,SAACJ,EAAQF,GAAT,OACT,yBAAKO,IAAKP,EAAGK,UAAU,SAASG,QAAS,kBAxDjD,SAAkBR,GACXJ,IACLD,GAAiB,GACjBJ,EAAkB,GAAD,mBAAKD,GAAL,CAAqBF,KACnB,KAAbA,EAAMY,KACRX,EAASD,EAAMkB,KAAI,SAACJ,EAAQO,GAC1B,OAAIT,IAAMS,EAAcjB,EACZU,MAEdT,EAAqB,MAAXD,EAAiB,IAAM,OA+CgBkB,CAASV,KAAKE,OAEhEN,GAAkB,0BAAOS,UAAU,mBAAmBT,GACvD,yBAAKS,UAAW,YAAeX,EAAiB,GAAI,WAClD,4BAAQW,UAAU,OAAOG,QArE/B,WACgC,IAA1BlB,EAAea,OAAcL,KAE/BT,EAASC,EAAeA,EAAea,OAAO,IAC9CZ,EAAkBD,EAAeqB,MAAM,EAAGrB,EAAea,OAAO,IAChEV,EAAqB,MAAXD,EAAiB,IAAM,QAgE/B,QACA,4BAAQa,UAAW,iBAAkBG,QAASV,GAA9C,mBCxFRc,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.f865080a.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\n\nfunction App() {\n  const initialBoard = ['','','','','','','','','']\n  const [board, setBoard] = useState(initialBoard)\n  const [previousBoards, setPreviousBoards] = useState([])\n  const [player, setPlayer] = useState(\"X\")\n  const [gameInProgress, setGameInProgess] = useState(false)\n  const [winningMessage, setWinningMessage] = useState('')\n\n  useEffect(() => {\n    checkForWin()\n  })\n\n  function restartBoard() {\n    setBoard(initialBoard)\n    setPreviousBoards([])\n    setPlayer(\"X\")\n    setGameInProgess(false)\n    setWinningMessage('')\n  }\n\n  function undo() {\n    if (previousBoards.length === 1) restartBoard()\n    else {\n      setBoard(previousBoards[previousBoards.length-1])\n      setPreviousBoards(previousBoards.slice(0, previousBoards.length-1))\n      setPlayer(player === \"X\" ? \"O\" : \"X\")\n    }\n  }\n\n  function addClick(i) {\n    if (!winningMessage){\n    setGameInProgess(true)\n    setPreviousBoards([...previousBoards, board])\n      if (board[i] === '') {\n        setBoard(board.map((square, index) => {\n          if (i === index) return player\n          else return square\n        }))\n        setPlayer(player === \"X\" ? \"O\" : \"X\")\n      }\n    }\n  }\n\n\n  function checkForWin() {\n    /*\n      0  1  2\n      3  4  5\n      6  7  8\n    */\n    //horizontal - DONE\n    for (let i = 0; i < 9; i += 3) \n      if (board[i] && board[i+1] === board[i] && board[i+2] === board[i]) {\n        setWinningMessage(`${board[i]} won horizontally`)\n        return\n      }\n     \n    //vertical\n    for (let i = 0; i < 3; i++) \n      if (board[i] && board[i+3] === board[i] && board[i+6] === board[i]) {\n      setWinningMessage(`${board[i]} won vertically`)\n      return\n    }\n     \n    //topLeft - bottomRight\n    if (board[0] && board[4] === board[0] && board[8] === board[0]) {\n      setWinningMessage(`${board[0]} won diagonally`)\n      return\n    }\n    \n    //bottomLeft - topRight\n    if (board[6] && board[4] === board[6] && board[2] === board[6]) {\n      setWinningMessage(`${board[6]} won diagonally`)\n      return\n    }\n\n    if (board.filter(square => square === '').length === 0) setWinningMessage(\"Tie game!\")\n    else setWinningMessage('')\n  }\n\n  return (\n    <div className=\"App\">\n      <h2>Tic Tac Toe</h2>\n      <div className=\"board\">\n        {board.map((square, i) => \n          <div key={i} className=\"square\" onClick={() => addClick(i)}>{square}</div>)}\n      </div>\n      {winningMessage && <span  className=\"winning-message\">{winningMessage}</span>}\n      <div className={\"buttons \"  + (gameInProgress ? '': 'hidden')}>\n        <button className=\"undo\" onClick={undo}>Undo</button>\n        <button className={\"restart-button\"} onClick={restartBoard}>Restart Game</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}